// ************************************************************
// fliename	CwnSkinMesh.h
// brief	独自フォーマットスキンメッシュ
// name		川口　裕
// memo
// 2013.10.21
// ************************************************************

// 多重インクルード防止 ***************************************
#ifndef	_CWN_SKINMESH_H_
#define	_CWN_SKINMESH_H_

// インクルード ***********************************************
#include "Model/CwnBaseMesh.h"
#include <D3DX10math.h>


// 前方宣言 ***************************************************
class D3DGraphics;
class Shader;
struct ModelSkinConstantBuffer;
struct CwnMesh;
struct AnimeData;


// ************************************************************
// class	CwnSkinMesh
// brief	独自フォーマット読込
// ************************************************************
class CwnSkinMesh : public CwnBaseMesh{
private:
	// D3DGraphicsから自由にアクセス可能にする
	friend class D3DGraphics;

	D3DXMATRIX		boneData[ 255 ];	// ボーン行列

	int				animeFrame;			// アニメーションフレーム

	AnimeData*		animeData;

	D3DXMATRIX*		bindBone;			// バインド行列
	D3DXMATRIX*		nowBone;			// 姿勢行列
	int				animeCntStart;		// アニメーションカウント開始
	int				animeCntEnd;		// アニメーションカウント終了

public:
	// ************************************************************
	// コンストラクタ
	// ************************************************************
	CwnSkinMesh();

	// ************************************************************
	// デストラクタ
	// ************************************************************
	~CwnSkinMesh();

	// ************************************************************
	// アニメフレームの加算
	// brief スキンメッシュのみで使用
	// ************************************************************
	void AddAnimeCount( int frame );

	// ************************************************************
	// アニメフレームのセット
	// brief スキンメッシュのみで使用
	// ************************************************************
	void SetAnimeCount( int frame );

	// ************************************************************
	// アニメデータのセット
	// brief スキンメッシュのみで使用
	// state	: type			: name			- memo
	// in		: Matrix*		: inBind		- バインド行列
	// in		: Matrix*		: inNow			- 姿勢行列
	// in		: int			: startCount	- アニメーションカウントの開始
	// in		: int			: endCount		- アニメーションカウントの終了
	// ************************************************************
	void SetAnimeData( AnimeData* inData );

	// ************************************************************
	// アニメーションカウントの終了確認
	// brief スキンメッシュのみで使用
	// ************************************************************
	bool GetAnimeEnd();

	int GetAnimeFrameEnd();

	// ************************************************************
	// ジョイントの行列取得
	// brief スキンメッシュのみで使用
	// ************************************************************
	const D3DXMATRIX GetJointMatrix ( int mum );

	// ************************************************************
	// 描画
	// ************************************************************
	void Render( Shader* shader, ModelSkinConstantBuffer* fscb );

private:
	// ************************************************************
	// サブ描画
	// ************************************************************
	void SubRender( int num, CwnMesh& mesh, Shader* shader, ModelSkinConstantBuffer* fscb );

	// ************************************************************
	// 現在の姿勢行列を取得
	// ************************************************************
	D3DXMATRIX GetCurrentPoseMatrix ( int num, int bindIndex, int nowIndex );

};

#endif